main()
{
    int type;
    double op2, op3;
    char s[MAXOP];

    while ((type = getop(s)) != EOF)
        switch (type)
        {
        case NUMBER:
            push(atof(s));
            break;
        case '+':
            push(pop() + pop());
            break;
        case '*':
            push(pop() * pop());
            break;
        case '-':
            op2 = pop();
            push(pop() - op2);
            break;
        case '/':
            op2 = pop();
            if (op2 != 0.0)
                push(pop() / op2);
            else
                printf("error: zero divisor\n");
            break;
        case '%':
            op2 = pop();
            op3 = pop();
            if (op2 != (int)op2 || op3 != (int)op3)
                printf("error: Only integers can get the modulus\n");
            else if (op2 == 0)
                printf("error: zero divisor\n");
            else if (op2 < 0)
                push(0);
            else
                push((int)op3 % (int)op2);
            break;
        case '=': 
            printf("\t%.8g\n", pop());
            break;
        case '.':
            printf("error: There's no number in front of the decimal point");
            break;
        case ' ' : 
        case '\n':
        case '\t':
            break;
        default:
            printf("error: unknown command %s\n", s);
            break;
        }

}

int getop(char s[])
{
    int i, c, c2;
    while ((c = getch()) == ' ' || c == '\n' || c == '\t')
        ;
    if (c == '-' || c == '+')  
        if (isdigit(c2 = getch()))
        {
            s[i++] = c;
            c = c2;
        }
        else
        {
            ungetch(c2);
            return c;
        }

    if (isdigit(c)) 
    {
        s[0] = c;
        i = 1;
        while (isdigit(c = getch()))
            s[i++] = c;
        if (c == '.')
        {
            s[i++] = c;
            while (isdigit(c = getch()))
                s[i++] = c;
        }
        s[i] = '\0';
        if (c != '\n' && c!= ' ' && c != '\t')
            ungetch(c);

        return NUMBER;
    }
    else 
        return c;
}
